/// <reference types="node" />
import { CallOptions, ChannelCredentials, Client, ClientOptions, ClientUnaryCall, handleUnaryCall, Metadata, ServiceError, UntypedServiceImplementation } from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";
/** Generated by sylk.build, DO NOT EDIT. */
/** [sylklabs.Todos.v1.Task] - */
export interface Task {
    /** [sylklabs.Todos.v1.Task.id] - */
    id: string;
    /** [sylklabs.Todos.v1.Task.title] - */
    title: string;
    /** [sylklabs.Todos.v1.Task.description] - */
    description: string;
    /** [sylklabs.Todos.v1.Task.done] - */
    done: boolean;
}
/** [sylklabs.Todos.v1.TaskId] - */
export interface TaskId {
    /** [sylklabs.Todos.v1.TaskId.id] - */
    id: string;
}
export declare const Task: {
    encode(message: Task, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Task;
    fromJSON(object: any): Task;
    toJSON(message: Task): unknown;
    create<I extends {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        done?: boolean | undefined;
    } & {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        done?: boolean | undefined;
    } & { [K in Exclude<keyof I, keyof Task>]: never; }>(base?: I | undefined): Task;
    fromPartial<I_1 extends {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        done?: boolean | undefined;
    } & {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        done?: boolean | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof Task>]: never; }>(object: I_1): Task;
};
export declare const TaskId: {
    encode(message: TaskId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TaskId;
    fromJSON(object: any): TaskId;
    toJSON(message: TaskId): unknown;
    create<I extends {
        id?: string | undefined;
    } & {
        id?: string | undefined;
    } & { [K in Exclude<keyof I, "id">]: never; }>(base?: I | undefined): TaskId;
    fromPartial<I_1 extends {
        id?: string | undefined;
    } & {
        id?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "id">]: never; }>(object: I_1): TaskId;
};
export type TaskServiceService = typeof TaskServiceService;
export declare const TaskServiceService: {
    /** [Todos.v1.TaskService.GetTask] - */
    readonly getTask: {
        readonly path: "/sylklabs.Todos.v1.TaskService/GetTask";
        readonly requestStream: false;
        readonly responseStream: false;
        readonly requestSerialize: (value: TaskId) => Buffer;
        readonly requestDeserialize: (value: Buffer) => TaskId;
        readonly responseSerialize: (value: Task) => Buffer;
        readonly responseDeserialize: (value: Buffer) => Task;
    };
};
export interface TaskServiceServer extends UntypedServiceImplementation {
    /** [Todos.v1.TaskService.GetTask] - */
    getTask: handleUnaryCall<TaskId, Task>;
}
export interface TaskServiceClient extends Client {
    /** [Todos.v1.TaskService.GetTask] - */
    getTask(request: TaskId, callback: (error: ServiceError | null, response: Task) => void): ClientUnaryCall;
    getTask(request: TaskId, metadata: Metadata, callback: (error: ServiceError | null, response: Task) => void): ClientUnaryCall;
    getTask(request: TaskId, metadata: Metadata, options: Partial<CallOptions>, callback: (error: ServiceError | null, response: Task) => void): ClientUnaryCall;
}
export declare const TaskServiceClient: {
    new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TaskServiceClient;
    service: typeof TaskServiceService;
};
