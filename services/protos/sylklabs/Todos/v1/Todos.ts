/* eslint-disable */
import {
  CallOptions,
  ChannelCredentials,
  Client,
  ClientOptions,
  ClientUnaryCall,
  handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  ServiceError,
  UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";

/** Generated by sylk.build, DO NOT EDIT. */

/** [sylklabs.Todos.v1.Task] - */
export interface Task {
  /** [sylklabs.Todos.v1.Task.id] - */
  id: string;
  /** [sylklabs.Todos.v1.Task.title] - */
  title: string;
  /** [sylklabs.Todos.v1.Task.description] - */
  description: string;
  /** [sylklabs.Todos.v1.Task.done] - */
  done: boolean;
}

/** [sylklabs.Todos.v1.TaskId] - */
export interface TaskId {
  /** [sylklabs.Todos.v1.TaskId.id] - */
  id: string;
}

function createBaseTask(): Task {
  return { id: "", title: "", description: "", done: false };
}

export const Task = {
  encode(message: Task, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.done === true) {
      writer.uint32(32).bool(message.done);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Task {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.done = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Task {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      title: isSet(object.title) ? String(object.title) : "",
      description: isSet(object.description) ? String(object.description) : "",
      done: isSet(object.done) ? Boolean(object.done) : false,
    };
  },

  toJSON(message: Task): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.done === true) {
      obj.done = message.done;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Task>, I>>(base?: I): Task {
    return Task.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Task>, I>>(object: I): Task {
    const message = createBaseTask();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.done = object.done ?? false;
    return message;
  },
};

function createBaseTaskId(): TaskId {
  return { id: "" };
}

export const TaskId = {
  encode(message: TaskId, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TaskId {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskId {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: TaskId): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskId>, I>>(base?: I): TaskId {
    return TaskId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskId>, I>>(object: I): TaskId {
    const message = createBaseTaskId();
    message.id = object.id ?? "";
    return message;
  },
};

export type TaskServiceService = typeof TaskServiceService;
export const TaskServiceService = {
  /** [Todos.v1.TaskService.GetTask] - */
  getTask: {
    path: "/sylklabs.Todos.v1.TaskService/GetTask",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TaskId) => Buffer.from(TaskId.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TaskId.decode(value),
    responseSerialize: (value: Task) => Buffer.from(Task.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Task.decode(value),
  },
} as const;

export interface TaskServiceServer extends UntypedServiceImplementation {
  /** [Todos.v1.TaskService.GetTask] - */
  getTask: handleUnaryCall<TaskId, Task>;
}

export interface TaskServiceClient extends Client {
  /** [Todos.v1.TaskService.GetTask] - */
  getTask(request: TaskId, callback: (error: ServiceError | null, response: Task) => void): ClientUnaryCall;
  getTask(
    request: TaskId,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Task) => void,
  ): ClientUnaryCall;
  getTask(
    request: TaskId,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Task) => void,
  ): ClientUnaryCall;
}

export const TaskServiceClient = makeGenericClientConstructor(
  TaskServiceService,
  "sylklabs.Todos.v1.TaskService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TaskServiceClient;
  service: typeof TaskServiceService;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
